# DBSeaSmart
DROP DATABASE IF EXISTS dbseasmart;

CREATE DATABASE dbseasmart;

USE dbseasmart;

CREATE TABLE administradores(
id_administrador INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
nombre_administrador VARCHAR(20) NOT NULL,
apellido_administrador VARCHAR(20) NOT NULL,
correo_administrador VARCHAR(100) UNIQUE NOT NULL,
contra_administrador VARCHAR(255) NOT NULL,
fecha_registro DATE NOT NULL DEFAULT DATE(NOW()),
estado_administrador tinyint(1) NOT NULL DEFAULT 1
);

INSERT INTO administradores (nombre_administrador, apellido_administrador, correo_administrador, contra_administrador) VALUES
('Pablo', 'Sánchez', 'pablo@gmail.com', '$2y$10$KJuIwuUvO5WzjWRWHGzEq.kuhinANEOhBL79Thi.k2wVmAh0s2ThG'); -- contraseña123

CREATE TABLE clientes(
id_cliente INT PRIMARY KEY AUTO_INCREMENT,
nombre_cliente VARCHAR(20) NOT NULL,
apellido_cliente VARCHAR(20) NOT NULL,
correo_cliente VARCHAR(100) UNIQUE NOT NULL,
contra_cliente VARCHAR(255) NOT NULL,
dui_cliente VARCHAR(11) UNIQUE NOT NULL,
telefono_movil VARCHAR(14) UNIQUE NOT NULL,
telefono_fijo VARCHAR(14) UNIQUE NULL,
estado_cliente tinyint(1) NOT NULL DEFAULT 1
);

INSERT INTO clientes(nombre_cliente, apellido_cliente, correo_cliente, contra_cliente, dui_cliente, telefono_movil, telefono_fijo)
VALUES('Pablo', 'Sánchez', 'pablo@gmail.com', '$2y$10$KJuIwuUvO5WzjWRWHGzEq.kuhinANEOhBL79Thi.k2wVmAh0s2ThG', '12345678-1', '1234-5678', '1234-5679');

SELECT * FROM clientes;

SELECT * FROM clientes;

CREATE TABLE direcciones(
id_direccion INT PRIMARY KEY AUTO_INCREMENT,
direccion VARCHAR(100) NOT NULL,
id_cliente INT NOT NULL,
FOREIGN KEY (id_cliente)
REFERENCES clientes(id_cliente)
);

CREATE TABLE categorias(
id_categoria INT PRIMARY KEY AUTO_INCREMENT,
nombre_categoria VARCHAR(20) NOT NULL UNIQUE,
imagen_categoria VARCHAR(25) NOT NULL,
   descripcion_categoria varchar(100) NOT NULL
);

INSERT INTO categorias (nombre_categoria, imagen_categoria, descripcion_categoria) VALUES
('Hombres', 'categoria_imageholder.png', 'Ropa para hombres'),
('Mujeres', 'categoria_imageholder.png', 'Ropa para mujeres'),
('Niños', 'categoria_imageholder.png', 'Ropa para niños'),
('Calzado', 'categoria_imageholder.png', 'Calzado para hombres, mujeres y niños'),
('Accesorios', 'categoria_imageholder.png', 'Accesorios para complementar tu estilo');

SELECT * FROM categorias;

CREATE TABLE sub_categorias(
id_sub_categoria INT PRIMARY KEY AUTO_INCREMENT,
nombre_sub_categoria VARCHAR(20) NOT NULL UNIQUE,
descripcion_sub_categoria VARCHAR(200) NOT NULL,
id_categoria INT,
FOREIGN KEY (id_categoria)
REFERENCES categorias(id_categoria)
);

INSERT INTO sub_categorias (nombre_sub_categoria, descripcion_sub_categoria, id_categoria) VALUES
('Camisas', 'Camisas para hombres', 1),
('Jammers', 'Jammers para hombres', 1),
('Bikinis', 'Bikinis para mujeres', 2),
('Camisetas', 'Camisetas para niños', 3),
('Shorts', 'Shorts para niños', 3),
('Zapatos de nado', 'Zapatos de nado de tela', 4),
('Aletas de natación', 'Aletas para practicar natación', 4),
('Gorros', 'Gorros y sombreros de silicona', 5),
('Goggles', 'Goggles estilo visor', 5);
SELECT * FROM sub_categorias;

CREATE TABLE productos(
id_producto INT PRIMARY KEY AUTO_INCREMENT,
nombre_producto VARCHAR(30) NOT NULL UNIQUE,
descripcion_producto VARCHAR(500) NOT NULL,
estado_producto tinyint(1) NOT NULL DEFAULT 1,
precio_producto FLOAT NOT NULL,
id_sub_categoria INT NOT NULL,
id_administrador INT NOT NULL,
FOREIGN KEY (id_sub_categoria)
REFERENCES sub_categorias(id_sub_categoria),
FOREIGN KEY (id_administrador)
REFERENCES administradores(id_administrador)
);

INSERT INTO productos (nombre_producto, descripcion_producto, precio_producto, id_sub_categoria, id_administrador) VALUES
('Camisa de Algodón', 'Camisa de algodón suave y cómoda para hombres', 10, 1, 1),
('Pantalón Vaquero Clásico', 'Pantalón vaquero de corte clásico para hombres', 20, 1, 1);

CREATE TABLE productos_colores(
id_producto_color INT PRIMARY KEY AUTO_INCREMENT,
color_producto VARCHAR(20) NOT NULL UNIQUE
);

INSERT INTO productos_colores (color_producto) VALUES
('Rojo'), ('Azul'), ('Verde'), ('Negro'), ('Blanco'), ('Gris'), ('Amarillo'), ('Rosa'), ('Morado'), ('Naranja');

SELECT * FROM productos_colores;

CREATE TABLE productos_tallas(
id_producto_talla INT PRIMARY KEY AUTO_INCREMENT,
talla VARCHAR(30) NOT NULL UNIQUE
);

INSERT INTO productos_tallas (talla) VALUES
('XS'), ('S'), ('M'), ('L'), ('XL'), ('XXL'), ('32'), ('34'), ('36'), ('38');

SELECT * FROM productos_tallas;

CREATE TABLE detalles_productos(
id_detalle_producto INT primary key auto_increment,
   id_producto_color INT NULL,
   id_producto_talla INT NULL,
   id_producto INT NOT NULL,
   imagen_producto VARCHAR(25) NULL,
   estado_detalle_producto tinyint(1) NOT NULL DEFAULT 1,
   existencia_producto INT NOT NULL,
   CHECK(existencia_producto >= 0),
   FOREIGN KEY (id_producto_color)
   REFERENCES productos_colores(id_producto_color),
   FOREIGN KEY (id_producto_talla)
REFERENCES productos_tallas(id_producto_talla),
   FOREIGN KEY (id_producto)
REFERENCES productos(id_producto)
);

INSERT INTO detalles_productos (id_producto_color, id_producto_talla, id_producto, imagen_producto, existencia_producto) VALUES
(1, 1, 1, 'producto1.png', 30),
(2, 2, 1, 'producto1.png', 30),
(1, 1, 2, 'producto1.png', 30),
(2, 2, 2, 'producto1.png', 30);

SELECT * FROM detalles_productos;

CREATE TABLE pedidos(
id_pedido INT PRIMARY KEY AUTO_INCREMENT,
fecha_pedido DATE DEFAULT DATE(NOW()) NULL,
estado_pedido ENUM('Pendiente', 'Siendo enviado', 'Enviado', 'Anulado', 'En carrito') NOT NULL,
        direccion VARCHAR(100) NULL,
id_cliente INT NOT NULL,
FOREIGN KEY (id_cliente)
REFERENCES clientes(id_cliente)
);

SELECT * FROM pedidos;

CREATE TABLE detalles_pedidos(
id_detalle_pedido INT PRIMARY KEY AUTO_INCREMENT,
cantidad_producto INT NOT NULL,
   precio_producto FLOAT NOT NULL,
id_pedido INT NOT NULL,
id_detalle_producto INT NOT NULL,
CHECK(precio_producto >= 1),
FOREIGN KEY(id_detalle_producto)
REFERENCES detalles_productos(id_detalle_producto),
FOREIGN KEY(id_pedido)
REFERENCES pedidos(id_pedido)
);

SELECT * FROM detalles_pedidos;

CREATE TABLE valoraciones(
id_valoracion INT PRIMARY KEY AUTO_INCREMENT,
fecha_valoracion DATE NOT NULL DEFAULT DATE(NOW()),
calificacion_producto INT NOT NULL,
comentario_producto VARCHAR(200) NOT NULL,
   estado_comentario tinyint(1) NOT NULL DEFAULT 1,
   id_detalle_pedido INT NOT NULL,
CHECK(calificacion_producto >= 1 AND calificacion_producto <=5),
   FOREIGN KEY(id_detalle_pedido)
REFERENCES detalles_pedidos(id_detalle_pedido)
);

-- PROCEDIMIENTO ALMACENADO QUE AGREGA UN DETALLE DE PEDIDO AL CARRITO Y DISMINUYE LAS EXISTENCIAS DEL DETALLE DEL PRODUCTO

DROP PROCEDURE IF EXISTS agregarDetalle;
DELIMITER $$

CREATE PROCEDURE agregarDetalle (IN cantidadProducto INT, IN precioProducto FLOAT, IN idPedido INT, IN idDetalleProducto INT)
BEGIN
DECLARE nuevaExistencia INT;
SET nuevaExistencia = (SELECT existencia_producto FROM detalles_productos WHERE id_detalle_producto = idDetalleProducto) - cantidadProducto;

UPDATE detalles_productos
SET existencia_producto = nuevaExistencia
WHERE id_detalle_producto = idDetalleProducto;

INSERT INTO detalles_pedidos(cantidad_producto, precio_producto, id_pedido, id_detalle_producto) VALUES(cantidadProducto, precioProducto, idPedido, idDetalleProducto);
END$$

DELIMITER ;


-- PROCEDIMIENTO ACTUALIZA LA CANTIDAD DEL PRODUCTO DE UN DETALLE DE PEDIDO

DROP PROCEDURE IF EXISTS actualizarDetalle;
DELIMITER $$

CREATE PROCEDURE actualizarDetalle (IN nuevaCantidad INT, IN idDetalleProducto INT, IN idDetallePedido INT)
BEGIN
DECLARE nuevaExistencia INT;

SET nuevaExistencia = ((SELECT existencia_producto
FROM detalles_productos
WHERE id_detalle_producto = idDetalleProducto) +
(SELECT cantidad_producto
FROM detalles_pedidos
WHERE id_detalle_pedido = idDetallePedido)) - nuevaCantidad;

UPDATE detalles_productos
SET existencia_producto = nuevaExistencia
WHERE id_detalle_producto = idDetalleProducto;

UPDATE detalles_pedidos
SET cantidad_producto = nuevaCantidad
WHERE id_detalle_pedido = idDetallePedido;
END$$

DELIMITER ;

-- PROCEDIMIENTO PARA REMOVER UN DETALLE DE PEDIDO DEL CARRITO

DROP PROCEDURE IF EXISTS removerDetalle;

DELIMITER $$

CREATE PROCEDURE removerDetalle (IN idDetallePedido INT, IN idDetalleProducto INT, IN idPedido INT)
BEGIN
DECLARE nuevaExistencia INT;

SET nuevaExistencia = (SELECT existencia_producto FROM detalles_productos WHERE id_detalle_producto = idDetalleProducto) + (SELECT cantidad_producto FROM detalles_pedidos WHERE id_detalle_pedido = idDetallePedido);

UPDATE detalles_productos
SET existencia_producto = nuevaExistencia
WHERE id_detalle_producto = idDetalleProducto;

DELETE FROM detalles_pedidos
WHERE id_detalle_pedido = idDetallePedido;
END$$

DELIMITER ;